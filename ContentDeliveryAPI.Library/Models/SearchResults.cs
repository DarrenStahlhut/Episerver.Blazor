// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ContentDeliveryAPI.Library.Models;
//
//    var searchResults = SearchResults.FromJson(jsonString);

namespace ContentDeliveryAPI.Library.Models
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SearchResults
    {
        [JsonProperty("totalMatching")]
        public int TotalMatching { get; set; }

        [JsonProperty("results")]
        public List<Result> Results { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("contentLink")]
        public ContentLink ContentLink { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("language")]
        public Language Language { get; set; }

        [JsonProperty("existingLanguages")]
        public List<Language> ExistingLanguages { get; set; }

        [JsonProperty("masterLanguage")]
        public Language MasterLanguage { get; set; }

        [JsonProperty("contentType")]
        public List<string> ContentType { get; set; }

        [JsonProperty("parentLink")]
        public ContentLink ParentLink { get; set; }

        [JsonProperty("routeSegment")]
        public string RouteSegment { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("changed")]
        public DateTimeOffset Changed { get; set; }

        [JsonProperty("created")]
        public DateTimeOffset Created { get; set; }

        [JsonProperty("startPublish")]
        public DateTimeOffset StartPublish { get; set; }

        [JsonProperty("stopPublish")]
        public object StopPublish { get; set; }

        [JsonProperty("saved")]
        public DateTimeOffset Saved { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("mainContentArea")]
        public Category MainContentArea { get; set; }

        [JsonProperty("hideSiteFooter")]
        public Category HideSiteFooter { get; set; }

        [JsonProperty("hideSiteHeader")]
        public Category HideSiteHeader { get; set; }

        [JsonProperty("metaDescription")]
        public Category MetaDescription { get; set; }

        [JsonProperty("metaTitle")]
        public Category MetaTitle { get; set; }

        [JsonProperty("teaserText")]
        public Category TeaserText { get; set; }

        [JsonProperty("category")]
        public Category Category { get; set; }

        [JsonProperty("disableIndexing")]
        public Category DisableIndexing { get; set; }

        [JsonProperty("mainBody")]
        public Category MainBody { get; set; }

        [JsonProperty("pageImage")]
        public PageImage PageImage { get; set; }
    }

    public partial class Category
    {
        [JsonProperty("value")]
        public ValueUnion Value { get; set; }

        [JsonProperty("propertyDataType")]
        public string PropertyDataType { get; set; }
    }

    public partial class ValueElement
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class ContentLink
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("workId")]
        public long WorkId { get; set; }

        [JsonProperty("guidValue")]
        public Guid GuidValue { get; set; }

        [JsonProperty("providerName")]
        public object ProviderName { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class Language
    {
        [JsonProperty("link")]
        public Uri Link { get; set; }

        [JsonProperty("displayName")]
        public string DisplayName { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class PageImage
    {
        [JsonProperty("value")]
        public ContentLink Value { get; set; }

        [JsonProperty("propertyDataType")]
        public string PropertyDataType { get; set; }

        [JsonProperty("expandedValue")]
        public ExpandedValue ExpandedValue { get; set; }
    }

    public partial class ExpandedValue
    {
        [JsonProperty("startPublish")]
        public DateTimeOffset StartPublish { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("parentLink")]
        public ContentLink ParentLink { get; set; }

        [JsonProperty("saved")]
        public DateTimeOffset Saved { get; set; }

        [JsonProperty("contentType")]
        public List<string> ContentType { get; set; }

        [JsonProperty("existingLanguages")]
        public List<object> ExistingLanguages { get; set; }

        [JsonProperty("copyright")]
        public Category Copyright { get; set; }

        [JsonProperty("stopPublish")]
        public object StopPublish { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("changed")]
        public DateTimeOffset Changed { get; set; }

        [JsonProperty("category")]
        public Category Category { get; set; }

        [JsonProperty("routeSegment")]
        public string RouteSegment { get; set; }

        [JsonProperty("created")]
        public DateTimeOffset Created { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("contentLink")]
        public ContentLink ContentLink { get; set; }

        [JsonProperty("language")]
        public Language Language { get; set; }

        [JsonProperty("masterLanguage")]
        public object MasterLanguage { get; set; }
    }

    public partial struct ValueUnion
    {
        public string String;
        public List<ValueElement> ValueElementArray;

        public static implicit operator ValueUnion(string String) => new ValueUnion { String = String };
        public static implicit operator ValueUnion(List<ValueElement> ValueElementArray) => new ValueUnion { ValueElementArray = ValueElementArray };
        public bool IsNull => ValueElementArray == null && String == null;
    }

    public partial class SearchResults
    {
        public static SearchResults FromJson(string json) => JsonConvert.DeserializeObject<SearchResults>(json, ContentDeliveryAPI.Library.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SearchResults self) => JsonConvert.SerializeObject(self, ContentDeliveryAPI.Library.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ValueUnionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ValueUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ValueUnion) || t == typeof(ValueUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new ValueUnion { };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new ValueUnion { String = stringValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<ValueElement>>(reader);
                    return new ValueUnion { ValueElementArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type ValueUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ValueUnion)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.ValueElementArray != null)
            {
                serializer.Serialize(writer, value.ValueElementArray);
                return;
            }
            throw new Exception("Cannot marshal type ValueUnion");
        }

        public static readonly ValueUnionConverter Singleton = new ValueUnionConverter();
    }
}
